name: Release

on:
  push:
    branches:
      - release/**
      - release-*
    paths-ignore:
      - 'CHANGELOG.md'
  create:
  # manual trigger still available
  pull_request:
    types: [closed]
    branches:
      - main
  pull_request_target:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare_release:
    name: Prepare changelog on release branch
    if: >-
      (github.event_name == 'push' && (startsWith(github.ref_name, 'release/') || startsWith(github.ref_name, 'release-'))) ||
      (github.event_name == 'create' && github.event.ref_type == 'branch' && (startsWith(github.event.ref, 'release/') || startsWith(github.event.ref, 'release-')))
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # On create event, checkout the newly created branch explicitly
          ref: ${{ github.ref_name || github.event.ref }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: '6.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.1.0
        with:
          useConfigFile: true

      - name: Set VERSION env
        id: set_version
        run: |
          version="v${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}.${{ steps.gitversion.outputs.patch }}"
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Generate changelog with git-cliff
        uses: orhun/git-cliff-action@v4.5.1
        with:
          config: ./cliff.toml
          args: --tag ${{ env.VERSION }}
        env:
            OUTPUT: CHANGELOG.md

      - name: Commit and push changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md || true
          if git diff --cached --quiet; then
            echo "No release prep changes to commit."
            exit 0
          fi
          git commit -m "chore: prepare release ${{ env.VERSION }} [skip ci]"
          git push origin HEAD

  tag_release:
    name: Tag on PR merge
    if: >-
      (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') &&
      github.event.action == 'closed' &&
      github.event.pull_request.merged == true &&
      (startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'release-'))
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout merge commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.merge_commit_sha }}

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v4.1.0
        with:
          versionSpec: '6.x'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4.1.0
        with:
          useConfigFile: true

      - name: Set VERSION env
        run: |
          version="v${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}.${{ steps.gitversion.outputs.patch }}"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Create and push Git tag (idempotent)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch --tags --force
          if git rev-parse "${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.VERSION }} already exists. Skipping."
            exit 0
          fi
          git tag -a "${{ env.VERSION }}" -m "Release ${{ env.VERSION }}"
          git push origin "${{ env.VERSION }}"
